test/test.cc:3:1: error: initialization of 'test_info_' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp,-warnings-as-errors]
TEST(foo, bar) {
^
/usr/local/include/gtest/gtest.h:2353:42: note: expanded from macro 'TEST'
#define TEST(test_suite_name, test_name) GTEST_TEST(test_suite_name, test_name)
                                         ^
/usr/local/include/gtest/gtest.h:2347:3: note: expanded from macro 'GTEST_TEST'
  GTEST_TEST_(test_suite_name, test_name, ::testing::Test, \
  ^
/usr/local/include/gtest/internal/gtest-internal.h:1548:65: note: expanded from macro 'GTEST_TEST_'
                                                    test_name)::test_info_ =  \
                                                                ^
/usr/local/include/gtest/internal/gtest-internal.h:493:3: note: possibly throwing constructor declared here
  CodeLocation(const std::string& a_file, int a_line)
  ^
test/test.cc:3:1: error: initializing non-owner argument of type 'testing::internal::TestFactoryBase *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory,-warnings-as-errors]
TEST(foo, bar) {
^
/usr/local/include/gtest/gtest.h:2353:42: note: expanded from macro 'TEST'
#define TEST(test_suite_name, test_name) GTEST_TEST(test_suite_name, test_name)
                                         ^
/usr/local/include/gtest/gtest.h:2347:3: note: expanded from macro 'GTEST_TEST'
  GTEST_TEST_(test_suite_name, test_name, ::testing::Test, \
  ^
/usr/local/include/gtest/internal/gtest-internal.h:1556:11: note: expanded from macro 'GTEST_TEST_'
          new ::testing::internal::TestFactoryImpl<GTEST_TEST_CLASS_NAME_(    \
          ^
test/test.cc:3:1: error: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls,-warnings-as-errors]
TEST(foo, bar) {
^
/usr/local/include/gtest/gtest.h:2353:42: note: expanded from macro 'TEST'
#define TEST(test_suite_name, test_name) GTEST_TEST(test_suite_name, test_name)
                                         ^
/usr/local/include/gtest/gtest.h:2347:3: note: expanded from macro 'GTEST_TEST'
  GTEST_TEST_(test_suite_name, test_name, ::testing::Test, \
  ^
/usr/local/include/gtest/internal/gtest-internal.h:1551:45: note: expanded from macro 'GTEST_TEST_'
          ::testing::internal::CodeLocation(__FILE__, __LINE__), (parent_id), \
                                            ^
note: expanded from here
/usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/basic_string.h:525:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
test/test.cc:3:1: error: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects,-warnings-as-errors]
TEST(foo, bar) {
^
/usr/local/include/gtest/gtest.h:2353:42: note: expanded from macro 'TEST'
#define TEST(test_suite_name, test_name) GTEST_TEST(test_suite_name, test_name)
                                         ^
/usr/local/include/gtest/gtest.h:2347:3: note: expanded from macro 'GTEST_TEST'
  GTEST_TEST_(test_suite_name, test_name, ::testing::Test, \
  ^
/usr/local/include/gtest/internal/gtest-internal.h:1547:3: note: expanded from macro 'GTEST_TEST_'
  ::testing::TestInfo* const GTEST_TEST_CLASS_NAME_(test_suite_name,          \
  ^
test/test.cc:4:5: error: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls,-warnings-as-errors]
    ASSERT_TRUE(true);
    ^
/usr/local/include/gtest/gtest.h:1990:32: note: expanded from macro 'ASSERT_TRUE'
#define ASSERT_TRUE(condition) GTEST_ASSERT_TRUE(condition)
                               ^
/usr/local/include/gtest/gtest.h:1972:3: note: expanded from macro 'GTEST_ASSERT_TRUE'
  GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \
  ^
/usr/local/include/gtest/internal/gtest-internal.h:1502:7: note: expanded from macro 'GTEST_TEST_BOOLEAN_'
      ::testing::AssertionResult(expression)) \
      ^
/usr/local/include/gtest/gtest.h:307:7: note: default parameter was declared here
      typename std::enable_if<
      ^
